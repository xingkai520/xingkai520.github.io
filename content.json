{"meta":{"title":"Hexo","subtitle":"","description":"","author":"xingkai","url":"https://xingkai520.github.io","root":"/"},"pages":[],"posts":[{"title":"上传博客图片无法显示问题","slug":"上传博客图片无法显示问题","date":"2020-04-23T09:25:29.000Z","updated":"2020-04-23T09:36:00.231Z","comments":true,"path":"2020/04/23/上传博客图片无法显示问题/","link":"","permalink":"https://xingkai520.github.io/2020/04/23/%E4%B8%8A%E4%BC%A0%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/","excerpt":"上传博客无法引用本地图片问题","text":"上传博客无法引用本地图片问题 ## 1.下载插件 首先我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image 123npm install https:&#x2F;&#x2F;github.com&#x2F;CodeFalling&#x2F;hexo-asset-image --save或npm install hexo-asset-image --save 2.要将要引入的图片放入与md文件同名的文件夹中在下载插件完成之后再git bush中输入hexo n “text”可生成一个新的md文件和同名文件夹，将你要引入的图片放入这个文件夹内引用 3.在引入图片时不能使用Markdown语法引入不能使用 1![](img&#x2F;img.png) 应使用 1&#123;% asset_img 图片.jpg 图片描述 %&#125; 例如： 使用 1![](img&#x2F;img.png) 可以在本地看到图片但上传至hexo中看不到图片,使用 1&#123;% asset_img 图片.jpg 图片描述 %&#125; 能让你上传至hexo的文章中看到图片但在本地看不到。 我是为了本地观察方便也将写入其中，但不影响上传","categories":[],"tags":[{"name":"博客","slug":"博客","permalink":"https://xingkai520.github.io/tags/%E5%8D%9A%E5%AE%A2/"}]},{"title":"viewport","slug":"viewport","date":"2020-04-23T08:26:09.000Z","updated":"2020-04-23T09:36:39.197Z","comments":true,"path":"2020/04/23/viewport/","link":"","permalink":"https://xingkai520.github.io/2020/04/23/viewport/","excerpt":"viewport的属性","text":"viewport的属性 1width=device-width 视口的宽度 通常设置成device-width(设备自身的宽度) 1initial-scale=1 设置页面的初始缩放值 1maxinum-scale=1.0 允许用户的最大缩放值 是一个数字 可以是小数 1mininum-scale=1.0 允许用户的最小缩放值 是一个数字 可以是小数 1user-scalable=no user-scalable : 用户是否可以手动缩放，值可以是：①yes、 true允许用户缩放；②no、false不允许用户缩放 1viewport-fit: cover; 应对留海屏幕的填充问题 (1) inital-scale也是用来设置视口的，前面说了，width是用来设置视口，其实有这样一个公式，如下： 视口 = 设备独立像素宽度 / inital-scale 可以通过inital-scale间接地设置视口，操作如下： 现在不让inital-scle是1，设置成2，如下： 那假如我把inital-scale=0.5，效果如下： 此时，我们设置视口，就有两种方式，如下： 12width=device-wdithinital-scale = 1 如果有一个人，它设置了width=device-wdith，又设置了inital-scale = 1，以谁为主。如果说你这样设置了，不放大，也不缩小，如下： 如果这样设置，如下： 则以最大的为主：","categories":[],"tags":[{"name":"前端","slug":"前端","permalink":"https://xingkai520.github.io/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"Javascript基础","slug":"javascript基础","date":"2020-04-22T12:28:30.000Z","updated":"2020-04-23T12:36:28.144Z","comments":true,"path":"2020/04/22/javascript基础/","link":"","permalink":"https://xingkai520.github.io/2020/04/22/javascript%E5%9F%BA%E7%A1%80/","excerpt":"Javascript基础","text":"Javascript基础 ### **基本知识：** 控制浏览器弹出一个警告框 1alert(\"帅帅帅\") 让浏览器在界面中输出一个内容(向body中输出一个内容) 1document.write(\"你好！！！\") 向控制台输出一个内容 1console.log(\"控制台你好！！！\") 可以将js代码写到标签的onclick属性中。不方便维护，不推荐使用。 1&lt;button onclick=\"alert('点我干嘛--');\"&gt;点我点我&lt;/button&gt; 可以将js代码写在超链接的href属性中，这样当点击超链接时会执行js代码（前面必须加上JavaScript：） 1&lt;a href=\"javascript:alert('让你点你就点-_-!');\"&gt;也点我点我&lt;/a&gt; 一般是写在js文件中用以下代码连接 1&lt;script type=\"text/javascript\" src=\"./js/index.js\"&gt;&lt;/script&gt; 一但这个script标签用于引入外部js文件，那么这个script标签再编写代码将被浏览器忽略 如果需要则需要再写一个script标签 执行顺序从上到下执行 字面量 都是一些不可改变的量 比如：1 2 3 4 5。字面量都是可以直接使用的，如下 1alert(2132146489); 字面量都是可以直接使用，但是我们一般都不会直接使用字面量 变量变量可以用来保存字面量，而且变量的值是可以任意改变的 变量更加方便使用，所以在开发中都是通过变量去保存一个字面量 很少直接使用字面量 声明变量：在js中使用var关键字来声明一个变量 1var a; 需要给变量赋值 1a = 123; 可以声明和赋值同时进行 1var b = 846815; 标识符在js中所有的可以由我们自主命名的都可以称为是标识符 例如：变量名、函数名、属性名都属于标识符 命名一个标识符时需要遵守如下的规则： 1.标识服中可以含有字母、数字、_、$ 2.标识符不能以数字开头 3.标识符不能是ES中的关键字或保留字 4.标识符一般采用驼峰命名法（首字母小写，每个开头字母大写，其余字母小写。不强制要求，但是是个好习惯） 5.JS底层保存标识符时实际上是采用Unicode编码，所以理论上讲，所有的utf-8中含有的内容都可以作为标识符 6.var只在声明变量时使用，在后续需要修改时不需要再重复给一个变量var 12345678var a_1$ = 3;var var = 3；//不能这样helloWorld xxxYyyZzz//驼峰命名法var 我最帅 = 384;//可以用，但是不推荐这样用，不符合行业规范var str1 = 1;str1 = 2;//最后命名的变量值有效 数据类型数据类型指的就是字面量的类型 在JS中一共有六种数据类型： String 字符串 Number 数值 Boolean 布尔值 Null 空值 Object 对象 其中String Number boolean Null Undefined属于基本数据类型，而Object属于引用数据类型 用法 String 字符串 在Js中字符串需要使用引号引起来 单引号和双引号都可以用没区别，但是不要混着用 不要在双引号中放双引号 可以在单引号中用双引号 在字符串中我们可以使用\\作为转义字符，当表示一些特殊符号时可以使用\\转义 1234567891011var str = \"hello\";console.log(str);var str = 'hello\"; //不要混着用var str = \"我说：\"今天天气真不错！\"\";//这样不对，会把”我说：“看做一个变量var str = '我说：\"今天天气真不错！\"';//这样可以var str = \"我说：\\\"今天天气真不错！\\\"\";//这样也可以，让里面的双引号仅仅代表双引号\\' 表示 ’\\\" 表示 \"\\n 表示换行\\t 制表符 \\\\ 表示\\ 我转义我自己 Number 数值 在JS中所有数值都是Number类型，包括整数和浮点数（小数） 数字123和字符123完全不同 可以使用一个typeof来检查一个变量类型 typeof+变量 JS中可以表示数字的最大值：Number.MAX_VALUE 可以用Number.MAX_VALUE*Number.MAX_VALUE，取最大值的平方 如果超过了最大值则会输出Infinity，表示正无穷；-Infinity表示负无穷 用两个字符串相乘：abc*bcd会输出NaN；NaN是一个特殊的数字，表示Not a number（不是数字） 使用typeof检查NaN会返回number Number.MIN_VALUE的值为0以上的最小值0.000000….. 在Js中整数的运算基本可以保证精确 如果使用JS进行浮点元素的计算，可能的到一个不精确的解果；因为二进制无法精确1/10; 可以把后面的数字给省略掉，但前提是不能涉及到钱，所以不要用JS计算精确度要求比较高的运算 1234567891011121314var a = 123;//数字123var b = \"123\";//字符123console.log(typeof a)//检查字符串时，会返回string；检查数值时，会返回numberconsole.log(Number.MAX_VALUE);a = Number.MAX_VALUE*Number.MAX_VALUE;//会输出Infinity，a = \"abc\"*\"bcd\"//输出NaNconsole.log(typeof a)//会输出numbera = Number.MIN_VALUEconsole.log(a)//输出5e-324var c = 1234456 + 4894894;//输出结果正确var c = 0.1 + 0.2;//输出结果为0.30000000000000000004 Boolean 布尔值 布尔值只有两个：true、false；真、假。主要用来做逻辑判断 true：表示真 false：表示假 使用typeof检查会输出boolean 123var bool = ture;console.log(bool);//输出为trueconsole.log(typeof bool)//输出为boolean Null类型的值只有一个，就是Null null（空值）专门用来表示为空的对象 使用typeof检查null会返回Object Undefined（未定义）类型的值只有一个，就是Undefined 当声明一个变量，但是不给变量赋值时，他的值就是Undefined 12345var a = null;console.log(a);//输出就是nullconsole.log(typeof a);//输出是Objectvar b = undefined;console.log(typeof b);//输出是undefined 注意 js中严格区分达小写 js中每一条语句以分号结尾（如果不写分号，浏览器会自动添加，但是会消耗一些系统资源，有些时候浏览器会加错分号，所以在开发中必须加分号） js会忽略多个空格和换行，所以我们可以利用空格和换行对代码进行格式化 注释多行注释/**/ 单行注释//","categories":[],"tags":[{"name":"Javascript基础","slug":"Javascript基础","permalink":"https://xingkai520.github.io/tags/Javascript%E5%9F%BA%E7%A1%80/"}]},{"title":"移动端视口适配","slug":"视口移动端适配","date":"2020-04-16T11:13:58.000Z","updated":"2020-04-23T09:36:28.950Z","comments":true,"path":"2020/04/16/视口移动端适配/","link":"","permalink":"https://xingkai520.github.io/2020/04/16/%E8%A7%86%E5%8F%A3%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/","excerpt":"移动端视口适配","text":"移动端视口适配 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798@media screen and (min-width:320px) &#123; html &#123; font-size: 21.33px &#125; body &#123; font-size: 12px &#125;&#125;@media screen and (min-width:360px) &#123; html &#123; font-size: 24px &#125; body &#123; font-size: 12px &#125;&#125;@media screen and (min-width:375px) &#123; html &#123; font-size: 25px &#125; body &#123; font-size: 12px &#125;&#125;@media screen and (min-width:384px) &#123; html &#123; font-size: 25.6px &#125; body &#123; font-size: 14px &#125;&#125;@media screen and (min-width:400px) &#123; html &#123; font-size: 26.67px &#125; body &#123; font-size: 14px &#125;&#125;@media screen and (min-width:414px) &#123; html &#123; font-size: 27.6px &#125; body &#123; font-size: 14px &#125;&#125;@media screen and (min-width:424px) &#123; html &#123; font-size: 28.27px &#125; body &#123; font-size: 14px &#125;&#125;@media screen and (min-width:480px) &#123; html &#123; font-size: 32px &#125; body &#123; font-size: 15.36px &#125;&#125;@media screen and (min-width:540px) &#123; html &#123; font-size: 36px &#125; body &#123; font-size: 17.28px &#125;&#125;@media screen and (min-width:720px) &#123; html &#123; font-size: 48px &#125; body &#123; font-size: 23.04px &#125;&#125;@media screen and (min-width:750px) &#123; html &#123; font-size: 50px &#125; body &#123; font-size: 24px &#125;&#125;","categories":[],"tags":[{"name":"前端","slug":"前端","permalink":"https://xingkai520.github.io/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"写博客基础","slug":"我的第一个博客","date":"2020-04-05T12:40:00.000Z","updated":"2020-04-10T07:50:48.583Z","comments":true,"path":"2020/04/05/我的第一个博客/","link":"","permalink":"https://xingkai520.github.io/2020/04/05/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/","excerpt":"Markdown的一些基本语法","text":"Markdown的一些基本语法 ==1）标题== 一级标题二级标题三级标题四级标题五级标题六级标题123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 ==2）字体== 加粗 倾斜 ==高亮== 删除线 我是^上标^ 我是下标 1234567891011**加粗***倾斜*&#x3D;&#x3D;高亮&#x3D;&#x3D;~~删除线~~我是^上标^我是~下标~ ==3）列表== 第一级实心圆（按tab换级） 第二级空心圆 第三级实心方框 第四级及之后都是实心方框 按回车取消本级 有序列表 英文状态下的1. 按回车自动添加表头数字 再按回车取消本行 1234567891011+ 第一级实心圆（按tab换级） + 第二级空心圆 + 第三级实心方框 + 第四级及之后都是实心方框按回车取消本级1. 有序列表2. 英文状态下的1.3. 按回车自动添加表头数字4. 再按回车取消本行 ==4）表格== mon tue wed thu 哈哈 哈哈哈 哈哈哈哈 哈哈哈哈哈 啦啦 啦啦啦 啦啦啦啦 啦啦啦啦啦 1234| mon | tue | wed | thu || ---- | ------ | -------- | ---------- || 哈哈 | 哈哈哈 | 哈哈哈哈 | 哈哈哈哈哈 || 啦啦 | 啦啦啦 | 啦啦啦啦 | 啦啦啦啦啦 | ==5）引用== 一级引用 再加&gt;变为二级引用 以此类推 按回车取消一级 1234567&gt; 一级引用&gt;&gt; &gt;再加&gt;变为二级引用&gt; &gt;&gt; &gt;&gt; 以此类推&gt; &gt;&gt;&gt; &gt;&gt; &gt; 按回车取消一级 ==6）分割线== 1-------- ==7）代码== 代码块 12代码块​```+语言 代码 12&#96;代码&#96;","categories":[],"tags":[{"name":"Markdown常用语法","slug":"Markdown常用语法","permalink":"https://xingkai520.github.io/tags/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"}]},{"title":"标题","slug":"模板","date":"2020-04-05T12:40:00.000Z","updated":"2020-04-23T09:08:25.684Z","comments":true,"path":"2020/04/05/模板/","link":"","permalink":"https://xingkai520.github.io/2020/04/05/%E6%A8%A1%E6%9D%BF/","excerpt":"标题","text":"标题","categories":[],"tags":[{"name":"标签","slug":"标签","permalink":"https://xingkai520.github.io/tags/%E6%A0%87%E7%AD%BE/"}]}],"categories":[],"tags":[{"name":"博客","slug":"博客","permalink":"https://xingkai520.github.io/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"前端","slug":"前端","permalink":"https://xingkai520.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"Javascript基础","slug":"Javascript基础","permalink":"https://xingkai520.github.io/tags/Javascript%E5%9F%BA%E7%A1%80/"},{"name":"Markdown常用语法","slug":"Markdown常用语法","permalink":"https://xingkai520.github.io/tags/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"},{"name":"标签","slug":"标签","permalink":"https://xingkai520.github.io/tags/%E6%A0%87%E7%AD%BE/"}]}